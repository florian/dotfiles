# Minor stuff. But it's faster to type than `~`.
ch () {
	cd ~/$1
}

code () {
	cd ~/Dropbox/code/$1
}

uni () {
	cd ~/Dropbox/Uni/Module/$1
}

tutor () {
	cd ~/Dropbox/Uni/Tutor/$1
}

tmp () {
	local dir=~/tmp/$1
	mkdir -p $dir
	cd $dir
}

mkcd () {
	mkdir -p $1
	cd $1
}

git_prompt() {
 ref=$(git symbolic-ref HEAD | cut -d'/' -f3)
 echo $ref
}

showgit () {
	setopt PROMPT_SUBST

	function precmd {
		PROMPT="%{$fg[yellow]%}%~%{$reset_color%}%{$fg[blue]%} [$(git_prompt)] %{$fg[red]%}% $ %{$reset_color%}"
	}

	autoload -U promptinit
	promptinit
}

alias sg=showgit

# Open vim and execute the CtrlP script when pressing Ctrl+P in the terminal
ctrlp () {
  </dev/tty vim -c CtrlP
}
zle -N ctrlp
bindkey "^p" ndkey "^p" ctrlp

# Quickly change into directories using Ctrl+O
ctrlo() {
  dir="$(find ~ -type d | grep -v .git | grep -v node_modules | grep -v $USER/Library | grep -v "$USER/\." | fzf)";
  [[ -d "$dir" ]] && cd $dir;
  zle reset-prompt
}
zle -N ctrlo
bindkey "^o" ctrlo

# Resume Vim with Ctrl+Z
foreground-vi() {
  fg %vi
}
zle -N foreground-vi
bindkey '^Z' foreground-vi

# Move current
mvc fi() {
	local b=$(basename $(pwd))
	cd ..
	mv $b $1
	cd $1
}

# Execute a command without any STDOUT output.
quietly () {
	$* >/dev/null 2>&1
}

# Pull, symlink and reload
dotfiles () {
	homesick pull dotfiles
	homesick symlink dotfiles
	source ~/.zshrc
}

# https://github.com/paulirish/dotfiles/blob/master/.functions
server () {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Power aliases
# https://github.com/pengwynn/dotfiles/commit/82c1be26f65193c7799775dc0cf14e13694ce701

g () {
	if [[ $# > 0 ]]; then
		git $@
	else
		git status --short
	fi
}
e () {
	$EDITOR ${@:-.}
}

o () {
	open ${@:-.}
}

# Attach last session or given session
ta () {
	if [[ $# -eq 0 ]]
	then
		tmux attach
	else
		tmux attach -t $*
	fi
}

# LaTeX

lclean () {
	rm -rf *.aux *.log *.fdb_latexmk *.fls *.out
}

# ---

colours () {
	for i in {0..255} ; do
	  printf "\x1b[38;5;${i}m${i} "
	done
}

# From: https://github.com/adamyonk/dotfiles/blob/master/bin
# Check out these dotfiles, they're awesome.

battery () {
	pmset -g batt | grep Internal | awk '{print $2}' | sed 's/;//'
}

faces () {
	faces=('ಠ_ಠ' 'ಠ_ರೃ' '﴾͡๏̯͡๏﴿' '๏_๏' 'ಠ▃ಠ' '(•‿•)' 'Ծ_Ծ' '¯\(°_o)/¯' '(✌ﾟ∀ﾟ)☞' '╚(•⌂•)╝' 't(-_-t)t' '(ツ)_/¯' '◔_◔' '◎⃝ _◎⃝' ';ლ(ಠ_ಠლ)' '(╯°□°）╯︵ ┻━┻' 'ᶘ ᵒᴥᵒᶅ')

	if [[ -z $1  ]]; then
	  echo 'Choose a face and | it to pbcopy'
	  i=1
	  for f in ${faces[@]}
	  do
	    echo $i $f
	    i=`expr $i + 1`
	  done
	else
	  echo ${faces[$1]}
	fi
}

wifi () {
	all_signal=(▁ ▃ ▅ ▇ )

	current=`/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | egrep "agrCtlRSSI|state|lastTxRate| SSID" | tr "\\n" ";" | awk '{print $2,$4,$6,$8}'`

	if [ "$current" == "" ]
	then
	  echo "(WIFI off)"
	fi

	strength=`echo $current | cut -d";" -f1-1 | cut -d" " -f2-`
	state=`echo $current | cut -d";" -f2-2 | cut -d" " -f2-`
	bandwidth=`echo $current | cut -d";" -f3-3 | cut -d" " -f2-`
	name=`echo $current | cut -d";" -f4-4 | cut -d" " -f2-`

	signal="( "
	for (( j = 0; j < 4; j++ ))
	do
	  if [[ $j -eq 0 && $strength -gt -94 ]] || [[ $j -eq 1 && $strength -gt -92 ]] ||
	     [[ $j -eq 2 && $strength -gt -86 ]] || [[ $j -eq 3 && $strength -gt -79 ]]
	  then
	    signal="${signal}${all_signal[$j]} "
	  else
	    signal="${signal}  "
	  fi
	done
	signal="${signal} )"

	echo "${name} ${bandwidth}Mbs ${signal}"
}
